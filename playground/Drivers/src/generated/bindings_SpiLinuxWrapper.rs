/* automatically generated by rust-bindgen 0.69.1 */

pub type wchar_t = ::std::os::raw::c_uint;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpiDeviceLinuxWrapper {
    _unused: [u8; 0],
}
extern "C" {
    pub fn SpiDeviceLinux_Create(
        busId: ::std::os::raw::c_int,
        csIndex: ::std::os::raw::c_int,
        speedHz: ::std::os::raw::c_int,
        bitsPerWord: ::std::os::raw::c_long,
        delayUsec: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> *mut SpiDeviceLinuxWrapper;
}
extern "C" {
    pub fn SpiDeviceLinux_Destroy(device: *mut SpiDeviceLinuxWrapper);
}
extern "C" {
    pub fn SpiDeviceLinux_SendReceiveBuffer(
        device: *mut SpiDeviceLinuxWrapper,
        sendMessage: *const ::std::os::raw::c_uchar,
        numberWriteBytes: usize,
        responseMessage: *mut ::std::os::raw::c_uchar,
        numberReadBytes: usize,
    ) -> ::std::os::raw::c_int;
}
